#!/usr/bin/env sh


TC_VERSION=13
TC_ARCH=x86_64

BUILD_OUTPUT="$WORK_DIR/dist"

CACHE_FILES=true
#DO_NOT_CLEANUP=true

# ncursesw added for lua-5.3
PACKAGES=(
  "fuse"
  "curl"
  "bash"
  "openssh"
  "lua-5.3"
  "iproute2"
  "tmux"
  "htop"
  "jq"
  "getlocale"
)

LP_VERSION_TABLE="quickjs,2021-03-27"

################################################################
# Handle private build.rc
################################################################
__RC_PRIVATE="$WORK_DIR/build.rc.private"
[ -f "$__RC_PRIVATE" ] || touch "$__RC_PRIVATE"
source "$__RC_PRIVATE"

################################################################
# Start additional patches
additional_patchs() {
################################################################
:
export ROOTFS="$BUILD_DIR/rootfs"

#
# Main
#

patches_remove_unused_files

patches_prepare_devfs

patches_rootfs

load_live_patches

(declare -f hook_after_addtional_patches > /dev/null 2>&1 && hook_after_addtional_patches || :)
################################################################
# End additional patches
}
################################################################

patches_remove_unused_files() {
    echo "Removing unused kernel entry files"
    local i
    for i in init linuxrc
    do 
        [ -f "$i" ] && rm -vrf "$ROOTFS/$i";
    done

    echo "Removing (rootfs)/etc/init.d"
    rm -rf $BUILD_DIR/rootfs/etc/init.d
}

patches_prepare_devfs() {
    echo "Strinking (rootfs)/dev and back it up to (rootfs)/opt/dev.extra.gz"
    (cd "$ROOTFS"; find -P dev/ | cpio -o -H newc ) | gzip -c > "$ROOTFS/opt/dev.extra.gz"

    local DEVFS="$ROOTFS/dev"
    rm -rf "$DEVFS"
    mkdir -p "$DEVFS"
    chmod 755 "$DEVFS"
    chown root:root "$DEVFS"

    echo "Creating nessesary device folders"
    for i in pts shm; do mkdir -p "$DEVFS/$i"; done

    echo "Creating nessesary device nodes"
    (
        cd "$DEVFS";
        :;
        mknod zero    c 1 5   ;
        mknod null    c 1 3   ;
        mknod random  c 1 8   ;
        mknod urandom c 1 9   ;
        mknod kmsg    c 1 11  ;
        mknod tty0    c 4 0   ;
        mknod tty     c 5 0   ;
        mknod initrd  b 1 250 ;
        mknod ram0    b 1 0   ;
    )
}

patches_rootfs() {
    echo "Preparing rootfs patches"
    local PATCH_TMP="$BUILD_DIR/patches.tmp"

    echo "Link (rootfs)/sbin/init to (rootfs)/init"
    ln -sf "/sbin/init" "$ROOTFS/init"

    mkdir -p "$PATCH_TMP"
    cp -Rp "$WORK_DIR/patches.rootfs.d/." "$PATCH_TMP/"

    echo "Applying permissions for (rootfs)/bin"
    chmod -vR +x $PATCH_TMP/bin

    #echo "Applying permissions for (rootfs)/sbin"
    #chmod -vR +x $PATCH_TMP/sbin

    echo "Applying permissions for (rootfs)/lib/jam"
    chmod -vR +x $PATCH_TMP/lib/jam/bin

    echo "Applying patches"
    cp -vRp "$PATCH_TMP/." "$ROOTFS/"
}

load_live_patches() {
    [ -d "$WORK_DIR/patches.live.d" ] || return 0
    local livepatch_workdir="$BUILD_DIR/livepatches.tmp"
    mkdir -p "$livepatch_workdir"
    find "$WORK_DIR/patches.live.d" -name '*.sh' | (
        while read found
        do
            filepath="$(realpath $found)"
            filename="$(basename $filepath)"
            echo "[i] Loading live patch '$filepath' ($filename)..."
            patches_workdir="$livepatch_workdir/$filename"
            mkdir -p "$patches_workdir"
            ( cd "$patches_workdir"; . "$filepath" ) || :
        done
    )
    rm -rf "$livepatch_workdir"
}
